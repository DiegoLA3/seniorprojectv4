{"ast":null,"code":"/*global module:true*/\n'use strict';\n\nMath.log2 = Math.log2 || function (x) {\n  return Math.log(x) / Math.LN2;\n};\nMath.log10 = Math.log10 || function (x) {\n  return Math.log(x) / Math.LN10;\n};\n(function () {\n  var Helpers = {\n    avg: function (arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        v += arr[index];\n      }\n      return v / arr.length;\n    },\n    min: function (arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0];\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 < v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    max: function (arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    upperMax: function (arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.max(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    lowerMin: function (arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0] || Infinity;\n      if (Array.isArray(v)) v = Helpers.lowerMin(v);\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (v2 == null) continue;\n        if (Array.isArray(v2)) v2 = Helpers.lowerMin(v2);\n        if (v2 < v) v = v2;\n      }\n      if (isNaN(v) || !isFinite(v)) v = 0;\n      return Math.max(0, v);\n    },\n    niceNumbers: function (range, round) {\n      var exponent = Math.floor(Math.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n      if (round) {\n        if (fraction < 1.5) niceFraction = 1;else if (fraction < 3) niceFraction = 2;else if (fraction < 7) niceFraction = 5;else niceFraction = 10;\n      } else {\n        if (fraction <= 1.0) niceFraction = 1;else if (fraction <= 2) niceFraction = 2;else if (fraction <= 5) niceFraction = 5;else niceFraction = 10;\n      }\n      return niceFraction * Math.pow(10, exponent);\n    },\n    getLinearTicks: function (min, max, maxTicks) {\n      var range = Helpers.niceNumbers(max - min, false);\n      var tickSpacing = Helpers.niceNumbers(range / (maxTicks - 1), true);\n      return [Math.floor(min / tickSpacing) * tickSpacing, Math.ceil(max / tickSpacing) * tickSpacing, tickSpacing];\n    },\n    getFont: function (options) {\n      options.style = options.style || 'normal';\n      options.variant = options.variant || 'normal';\n      options.weight = options.weight || 'lighter';\n      options.size = options.size || '12';\n      options.family = options.family || 'Arial';\n      return [options.style, options.variant, options.weight, options.size + 'px', options.family].join(' ');\n    },\n    getAxisRatio: function (min, max, value) {\n      return (value - min) / (max - min);\n    }\n  };\n  var BarChart = function () {\n    function BarChart(ctx, options) {\n      this.mouseListeners = [];\n      this.currentHint = null;\n      this.fillRegions = [];\n      this.options = {\n        font: 'Helvetica',\n        fontWeight: 'normal',\n        fontSizeTitle: 24,\n        fontSizeAxes: 20,\n        fontSizeTicks: 18,\n        fontSizeLabels: 18,\n        fontDataTags: 18,\n        fontSizeLegend: 18,\n        fontSizeHint: 18,\n        paddingPercentBars: 0.10,\n        paddingPercentTicks: 0.15,\n        paddingPixelsVertical: 10,\n        paddingPixelsHorizontal: 10,\n        paddingPixelsTicks: 10,\n        maxWidthBars: 0,\n        fillColorBackground: 'rgb(255, 255, 255)',\n        strokeColorBars: 'rgb(0, 0, 0)',\n        fillColorBars: 'rgba(180, 180, 180, 0.25)',\n        scaleStyle: 'linear',\n        barStyle: 'none',\n        stackedBarPadding: 3,\n        defaultMaxTick: 0,\n        pixelsLegendSquare: 10,\n        radiusDot: 5,\n        fillColorLegend: 'rgb(230, 230, 230)',\n        tickFormatter: null,\n        tickFormatterMeasure: null,\n        fillRegion: 'normal'\n      };\n      options = options || {};\n      for (var key in this.options) {\n        if (options.hasOwnProperty(key)) this.options[key] = options[key];\n      }\n      this.ctx = ctx;\n      this.content = {};\n      this.labelPositions = {};\n    }\n    BarChart.prototype.update = function (content) {\n      if (typeof content !== 'object') {\n        throw new Error('Collections must be objects.');\n      } else if (!(content.hasOwnProperty('labels') && content.hasOwnProperty('data'))) {\n        throw new Error('Collection must specify labels and data.');\n      } else if (!(Array.isArray(content.labels) && Array.isArray(content.data))) {\n        throw new Error('Labels and data must be arrays.');\n      } else if (content.labels.length !== content.data.length) {\n        throw new Error('Labels and data length must match.');\n      }\n      content._data_standard_deviation = [];\n      content._data_standard_error = [];\n      for (var i = 0; i < content.data.length; ++i) {\n        var isArr = Array.isArray(content.data[i]);\n        if (this.options.scaleStyle === 'log2') {\n          if (isArr) {\n            for (var i3 = 0; i3 < content.data[i].length; ++i3) content.data[i][i3] = Math.log2(content.data[i][i3]);\n          } else content.data[i] = Math.log2(content.data[i]);\n        }\n        if (isArr) {\n          var mean = Helpers.avg(content.data[i]);\n          var acc = 0;\n          for (var i2 = 0; i2 < content.data[i].length; ++i2) acc += Math.pow(mean - content.data[i][i2], 2);\n          acc = Math.sqrt(acc / (content.data[i].length - 1));\n          content._data_standard_deviation.push(acc);\n          content._data_standard_error.push(acc / Math.sqrt(content.data[i].length));\n        } else {\n          content._data_standard_deviation.push(0);\n          content._data_standard_error.push(0);\n        }\n      }\n      this.content = content;\n      this.redraw();\n    };\n    BarChart.prototype.redraw = function () {\n      setTimeout(function () {\n        this._draw();\n      }.bind(this), 0);\n    };\n    BarChart.prototype.mousemove = function (x, y) {\n      var res = null;\n      for (var index = 0; index < this.mouseListeners.length; ++index) {\n        if (res = this.mouseListeners[index](x, y)) break;\n      }\n      if (!res || typeof res !== 'object' || !res.hasOwnProperty('index') || !res.hasOwnProperty('drawIndex')) {\n        if (this.currentHint !== null) {\n          this.currentHint = null;\n          this.redraw();\n        }\n        return;\n      }\n      var ch = this.currentHint;\n      if (ch == null || ch.index != res.index || ch.drawIndex != res.drawIndex) {\n        this.currentHint = res;\n        this.redraw();\n      }\n    };\n    BarChart.prototype._draw = function () {\n      var labelPositions = {};\n      this.mouseListeners = [];\n      this.fillRegions = [];\n      var options = this.options;\n      var ctx = this.ctx,\n        content = this.content;\n      var width = ctx.canvas.width,\n        height = ctx.canvas.height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.translate(-0.5, -0.5);\n      var remainingWidth = width,\n        remainingHeight = height;\n      var index;\n      if (options.fillColorBackground != null) {\n        ctx.save();\n        ctx.fillStyle = options.fillColorBackground;\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n      }\n      var topYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      /* Draw title of bar chart */\n      if (content.title != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeTitle,\n          family: options.font\n        });\n        ctx.textAlign = 'center';\n        ctx.fillText(content.title, width / 2, topYPadding + options.fontSizeTitle);\n        ctx.restore();\n        remainingHeight -= options.fontSizeTitle * 1.25;\n        topYPadding += options.fontSizeTitle * 1.25;\n      }\n\n      /* Compute required left padding */\n      var leftXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n      var leftXDrawYLabel = null;\n      if (content.yAxis != null) {\n        leftXDrawYLabel = leftXPadding + options.fontSizeAxes * 0.5;\n        remainingWidth -= options.fontSizeAxes * 1.25;\n        leftXPadding += options.fontSizeAxes * 1.25;\n      }\n      ctx.save();\n      ctx.font = Helpers.getFont({\n        weight: options.fontWeight,\n        size: options.fontSizeTicks,\n        family: options.font\n      });\n      var maxChartValue, minChartValue;\n      if (options.barStyle === 'stacked') {\n        maxChartValue = 0;\n        minChartValue = Infinity;\n        for (var cmIndex = 0; cmIndex < content.data.length; ++cmIndex) {\n          var doB;\n          if (Array.isArray(doB = content.data[cmIndex])) {\n            var tempSum = 0;\n            for (var ii2 = 0; ii2 < doB.length; ++ii2) tempSum += doB[ii2];\n            maxChartValue = Math.max(maxChartValue, tempSum);\n            minChartValue = Math.min(minChartValue, tempSum);\n          } else {\n            maxChartValue = Math.max(maxChartValue, content.data[cmIndex]);\n            minChartValue = Math.min(minChartValue, content.data[cmIndex]);\n          }\n        }\n      } else {\n        maxChartValue = Helpers.upperMax(content.data);\n        minChartValue = Helpers.lowerMin(content.data);\n      }\n      if (options.scaleStyle.indexOf('adaptive') === 0) {\n        if (options.scaleStyle.indexOf(':') !== -1) {\n          var floater = parseFloat(options.scaleStyle.split(/[:]/)[1]);\n          minChartValue *= floater;\n          maxChartValue *= 1 + (1 - floater) / 2.0;\n        }\n      } else minChartValue = 0;\n      if (options.defaultMaxTick > maxChartValue) maxChartValue = options.defaultMaxTick;\n      if (content.bars != null && Array.isArray(content.bars)) {\n        for (index = 0; index < content.bars.length; ++index) {\n          var cbv = content.bars[index].value;\n          if (isNaN(cbv)) continue;\n          maxChartValue = Math.max(maxChartValue, cbv);\n          minChartValue = Math.min(minChartValue, cbv);\n        }\n      }\n      var maxYAxisTickWidth = options.scaleStyle == 'log2' ? Math.ceil(Math.pow(2, maxChartValue)) : Math.ceil(maxChartValue) + '.00';\n      if (options.tickFormatterMeasure != null) maxYAxisTickWidth = options.tickFormatterMeasure;\n      maxYAxisTickWidth = ctx.measureText(maxYAxisTickWidth).width;\n      maxYAxisTickWidth = Math.ceil(maxYAxisTickWidth) + options.paddingPixelsTicks;\n      remainingWidth -= maxYAxisTickWidth;\n      leftXPadding += maxYAxisTickWidth;\n      ctx.restore();\n      var rightXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n\n      /* Draw legend */\n      if (content.legend != null && Array.isArray(content.legend)) {\n        ctx.save();\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeLegend,\n          family: options.font\n        });\n        var maxLWidth = 0;\n        for (var lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          maxLWidth = Math.max(maxLWidth, ctx.measureText(content.legend[lIndex].label).width);\n        }\n        maxLWidth = Math.ceil(maxLWidth);\n        maxLWidth += options.pixelsLegendSquare + 8;\n        var legendEntriesPerLine = Math.floor((remainingWidth - options.paddingPixelsHorizontal * 2) / maxLWidth);\n        var lLReqHeight = Math.ceil(content.legend.length / legendEntriesPerLine) * options.fontSizeLegend * 1.5;\n        remainingHeight -= lLReqHeight;\n        bottomYPadding += lLReqHeight;\n        ctx.strokeStyle = 'rgb(0, 0, 0)';\n        ctx.fillStyle = options.fillColorLegend;\n        var bSX, bSY;\n        ctx.beginPath();\n        ctx.moveTo(bSX = leftXPadding, bSY = topYPadding + remainingHeight);\n        ctx.lineTo(bSX + remainingWidth, bSY);\n        ctx.lineTo(bSX + remainingWidth, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY);\n        ctx.stroke();\n        ctx.fill();\n        for (lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          var legLine = Math.floor(lIndex / legendEntriesPerLine);\n          var legCol = lIndex % legendEntriesPerLine;\n          ctx.fillStyle = content.legend[lIndex].color;\n          var boxX = bSX + legCol * maxLWidth + 3,\n            boxY = bSY + legLine * options.fontSizeLegend * 1.5 + options.fontSizeLegend * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(boxX, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY);\n          ctx.fill();\n          ctx.stroke();\n          ctx.textAlign = 'left';\n          ctx.fillStyle = 'rgb(0, 0, 0)';\n          ctx.fillText(content.legend[lIndex].label, boxX + 3 + options.pixelsLegendSquare, boxY + options.fontSizeLegend * 0.5);\n        }\n        ctx.restore();\n      }\n\n      /* Draw x-axis label of bar chart */\n      var bottomYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      if (content.xAxis != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeAxes,\n          family: options.font\n        });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.xAxis, width - remainingWidth + remainingWidth / 2, topYPadding + remainingHeight - bottomYPadding);\n        remainingHeight -= options.fontSizeAxes * 1.5;\n        bottomYPadding += options.fontSizeAxes * 1.5;\n        ctx.restore();\n      }\n      var widthPerBar = remainingWidth / content.data.length;\n\n      /* Draw x-axis top labels */\n      if (content.topLabels != null) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeLabels,\n          family: options.font\n        });\n        remainingHeight -= options.fontSizeLabels * 1.5;\n        topYPadding += options.fontSizeLabels * 1.5;\n        for (index = 0; index < content.topLabels.length; ++index) {\n          ctx.fillText(content.topLabels[index], leftXPadding + index * widthPerBar + widthPerBar / 2, topYPadding - options.fontSizeLabels / 2);\n        }\n        ctx.restore();\n      }\n\n      /* Draw x-axis labels */\n      ctx.save();\n      var reqWidth = 0;\n      if (content.dataTags != null) {\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontDataTags,\n          family: options.font\n        });\n        var dataTags = content.dataTags;\n        for (index = 0; index < dataTags.length; ++index) {\n          if (Array.isArray(dataTags[index])) {\n            for (var index2 = 0; index2 < dataTags[index].length; ++index2) {\n              reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index][index2]).width + 5));\n            }\n          } else {\n            reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index]).width + 5));\n          }\n        }\n      }\n      ctx.font = Helpers.getFont({\n        weight: options.fontWeight,\n        size: options.fontSizeLabels,\n        family: options.font\n      });\n      var computedBarPadding = Math.floor(widthPerBar * options.paddingPercentBars / 2);\n      var wwh = widthPerBar - computedBarPadding * 2;\n      if (wwh < reqWidth) {\n        computedBarPadding -= Math.ceil((reqWidth - wwh) / 2);\n        computedBarPadding = Math.max(0, computedBarPadding);\n      } else if (options.maxWidthBars > 0 && wwh > options.maxWidthBars) {\n        computedBarPadding = Math.floor((widthPerBar - options.maxWidthBars) / 2);\n      }\n      var maxTextWidth = 0,\n        maxTextStackSize = 1;\n      for (index = 0; index < content.labels.length; ++index) {\n        var tLabel = content.labels[index];\n        if (Array.isArray(tLabel)) {\n          maxTextStackSize = Math.max(maxTextStackSize, tLabel.length);\n          for (index2 = 0; index2 < tLabel.length; ++index2) {\n            maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel[index2]).width);\n          }\n        } else maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel).width);\n      }\n      var xLabelsRotated = false;\n      if (maxTextWidth > widthPerBar - computedBarPadding) {\n        ctx.textAlign = 'right';\n        ctx.rotate(Math.PI * 1.5);\n        xLabelsRotated = true;\n      } else {\n        ctx.textAlign = 'center';\n      }\n      var lastLabelY = -options.fontSizeLabels;\n      for (index = 0; index < content.labels.length; ++index) {\n        var cLabel = content.labels[index];\n        var x = leftXPadding + index * widthPerBar + widthPerBar / 2,\n          y = topYPadding + remainingHeight - options.fontSizeLabels / 2;\n        if (xLabelsRotated) {\n          y = topYPadding + remainingHeight - maxTextWidth + 5;\n          y = [x, x = -y][0];\n          if (y < lastLabelY + options.fontSizeLabels) continue;\n          lastLabelY = y;\n        }\n        var yUp = options.fontSizeLabels * (maxTextStackSize - 1);\n        if (Array.isArray(cLabel)) {\n          if (xLabelsRotated) {\n            yUp = options.fontSizeLabels * (cLabel.length - 1.5);\n            yUp /= 2;\n          }\n          for (index2 = 0; index2 < cLabel.length; ++index2) {\n            ctx.fillText(cLabel[index2], x, y - yUp);\n            yUp -= options.fontSizeLabels;\n          }\n        } else {\n          if (xLabelsRotated) yUp = -options.fontSizeLabels * 0.25;\n          ctx.fillText(cLabel, x, y - yUp);\n        }\n      }\n      if (xLabelsRotated) {\n        remainingHeight -= maxTextWidth + 5;\n        bottomYPadding += maxTextWidth + 5;\n      } else {\n        var remVal = options.fontSizeLabels * maxTextStackSize;\n        remVal += options.fontSizeLabels * 0.5;\n        remainingHeight -= remVal;\n        bottomYPadding += remVal;\n      }\n      ctx.restore();\n\n      /* Draw boundaries */\n      var boundX1 = leftXPadding,\n        boundX2 = leftXPadding + remainingWidth;\n      var boundY1 = topYPadding,\n        boundY2 = topYPadding + remainingHeight;\n      for (index = 0; index < content.labels.length; ++index) labelPositions[index] = {\n        xStart: leftXPadding + index * widthPerBar,\n        xEnd: leftXPadding + (1 + index) * widthPerBar,\n        yStart: boundY1,\n        yEnd: boundY2\n      };\n      ctx.save();\n      ctx.strokeStyle = 'rgb(0, 0, 0)';\n      ctx.beginPath();\n      if (content.topLabels != null) {\n        ctx.moveTo(boundX2, boundY1);\n        ctx.lineTo(boundX1, boundY1);\n      } else {\n        ctx.moveTo(boundX1, boundY1);\n      }\n      ctx.lineTo(boundX1, boundY2);\n      ctx.lineTo(boundX2, boundY2);\n      if (content.topLabels != null) ctx.lineTo(leftXPadding + remainingWidth, topYPadding);\n      ctx.stroke();\n      ctx.restore();\n\n      /* Draw top label */\n      if (content.topLabel != null) {\n        ctx.save();\n        ctx.textAlign = 'right';\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeLabels,\n          family: options.font\n        });\n        ctx.fillText(content.topLabel, leftXPadding - 3, topYPadding - options.fontSizeLabels / 2);\n        ctx.restore();\n      }\n\n      /* Draw y-axis label of bar chart */\n      if (content.yAxis != null) {\n        ctx.save();\n        ctx.rotate(Math.PI * 1.5);\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeAxes,\n          family: options.font\n        });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.yAxis, -(topYPadding + remainingHeight / 2), leftXDrawYLabel);\n        ctx.restore();\n      }\n\n      /* Draw y-axis labels */\n      ctx.save();\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.20)';\n      ctx.font = Helpers.getFont({\n        weight: options.fontWeight,\n        size: options.fontSizeTicks,\n        family: options.font\n      });\n      ctx.textAlign = 'right';\n      var tickMeta = Helpers.getLinearTicks(0, maxChartValue, Math.max(2, remainingHeight / (options.fontSizeTicks * (1 + options.paddingPercentTicks))));\n      var alpha = maxChartValue / options.fontSizeTicks;\n      maxChartValue = tickMeta[1];\n      if (maxChartValue > 1) maxChartValue += Math.ceil(alpha);else maxChartValue += alpha;\n      var ticks = [];\n      while (tickMeta[0] <= tickMeta[1]) {\n        ticks.push(tickMeta[0]);\n        tickMeta[0] += tickMeta[2];\n      }\n      for (index = 0; index < ticks.length; ++index) {\n        var tickHeight = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, ticks[index]));\n        if (tickHeight < 0) continue;\n        if (options.scaleStyle == 'log2' && ticks[index] !== 0) ticks[index] = Math.round(Math.pow(2, ticks[index]));else ticks[index] = Math.floor(ticks[index] * 100) / 100;\n        if (options.tickFormatter != null && typeof options.tickFormatter === 'function') {\n          ctx.fillText(options.tickFormatter(ticks[index]).toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        } else {\n          ctx.fillText(ticks[index].toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        }\n        if (index == 0) continue;\n        ctx.beginPath();\n        ctx.moveTo(leftXPadding, topYPadding + remainingHeight - tickHeight);\n        ctx.lineTo(leftXPadding + remainingWidth, topYPadding + remainingHeight - tickHeight);\n        ctx.stroke();\n      }\n      ctx.restore();\n      if (content.bars != null && Array.isArray(content.bars)) {\n        ctx.save();\n        for (index = 0; index < content.bars.length; ++index) {\n          var cBar = content.bars[index];\n          if (cBar.value > maxChartValue) continue;\n          var renderBarY = topYPadding + remainingHeight - Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, cBar.value));\n          ctx.strokeStyle = cBar.style;\n          ctx.fillStyle = cBar.style;\n          ctx.beginPath();\n          ctx.moveTo(boundX1, renderBarY);\n          ctx.lineTo(boundX2, renderBarY);\n          ctx.stroke();\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n\n      /* Draw bars */\n      ctx.save();\n      var lastData = null;\n      for (index = 0; index < content.data.length; ++index) {\n        var fillColorForIndex = null;\n        var strokeColorForIndex = null;\n        if (content.fillColor != null) {\n          if (Array.isArray(content.fillColor)) fillColorForIndex = ctx.fillStyle = content.fillColor[index];else ctx.fillStyle = content.fillColor;\n        } else ctx.fillStyle = options.fillColorBars;\n        if (content.strokeColor != null) {\n          if (Array.isArray(content.strokeColor)) strokeColorForIndex = ctx.strokeStyle = content.strokeColor[index];else ctx.strokeStyle = content.strokeColor;\n        } else ctx.strokeStyle = options.strokeColorBars;\n        var v = content.data[index];\n        var vIsArr = Array.isArray(v);\n        var renderStartX = leftXPadding + widthPerBar * index;\n        if (vIsArr && options.barStyle === 'stacked') {\n          var runningValue = 0,\n            lastHeight = 0;\n          for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n            if (fillColorForIndex != null && Array.isArray(fillColorForIndex)) {\n              ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n            }\n            if (strokeColorForIndex != null && Array.isArray(strokeColorForIndex)) {\n              ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n            }\n            runningValue += v[drawIndex];\n            var renderBarHeight = Math.floor(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, runningValue));\n            var renderUpToY = topYPadding + remainingHeight - renderBarHeight;\n            if (Math.abs(renderBarHeight - lastHeight) < options.stackedBarPadding + 2) {\n              lastHeight = renderBarHeight;\n              continue;\n            }\n            var barPadP = drawIndex > 0 ? options.stackedBarPadding : 0;\n            var tSX, tSY;\n            var tEX, tEY;\n            ctx.beginPath();\n            ctx.moveTo(tSX = renderStartX + computedBarPadding, tSY = topYPadding + remainingHeight - lastHeight - barPadP);\n            ctx.lineTo(renderStartX + computedBarPadding, renderUpToY);\n            ctx.lineTo(tEX = renderStartX + (widthPerBar - 1) - computedBarPadding, tEY = renderUpToY);\n            ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight - lastHeight - barPadP);\n            if (drawIndex > 0) ctx.lineTo(tSX, tSY);\n            ctx.stroke();\n            ctx.fill();\n            var hint;\n            if (content.hints != null && content.hints[index] != null && (hint = content.hints[index][drawIndex]) != null) {\n              this.mouseListeners.push(function (index, drawIndex, hint, sx, sy, ex, ey, x, y) {\n                var minX = Math.min(sx, ex),\n                  maxX = Math.max(sx, ex);\n                var minY = Math.min(sy, ey),\n                  maxY = Math.max(sy, ey);\n                if (x < minX || x > maxX || y < minY || y > maxY) return null;\n                return {\n                  index: index,\n                  drawIndex: drawIndex,\n                  rect: {\n                    left: minX,\n                    right: maxX,\n                    top: minY,\n                    bottom: maxY\n                  },\n                  text: hint.split('\\n')\n                };\n              }.bind(this, index, drawIndex, hint, tSX, tSY, tEX, tEY));\n            }\n            var tagText;\n            if (tSY - renderUpToY > options.fontDataTags * 1.25 && content.dataTags != null && (tagText = content.dataTags[index]) != null && (tagText = tagText[drawIndex]) != null) {\n              var oFS = ctx.fillStyle;\n              ctx.fillStyle = 'rgb(0, 0, 0)';\n              ctx.font = Helpers.getFont({\n                weight: options.fontWeight,\n                size: options.fontDataTags,\n                family: options.font\n              });\n              ctx.textAlign = 'center';\n              ctx.fillText(tagText, renderStartX + widthPerBar / 2, tSY - options.fontDataTags * 0.25);\n              ctx.fillStyle = oFS;\n            }\n            lastHeight = renderBarHeight;\n          }\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({\n              weight: options.fontWeight,\n              size: options.fontSizeLabels,\n              family: options.font\n            });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY - 3);\n          }\n        } else if (options.barStyle === 'line') {\n          if (vIsArr) {\n            var rbx = renderStartX + widthPerBar / 2;\n            var lDu;\n            if (options.fillRegion === 'background') {\n              lDu = lastData;\n              if (Array.isArray(lDu)) lDu = lDu[0];\n              if (lDu != null) {\n                var sFS = ctx.fillStyle;\n                ctx.fillStyle = lDu.color;\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1);\n                ctx.fillStyle = sFS;\n              }\n            }\n            var nLData = [];\n            for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n              var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v[drawIndex]));\n              var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n              var rby = renderUpToY3;\n              if (lastData != null) {\n                var tLX, tLY;\n                if (Array.isArray(lastData)) {\n                  tLX = (lastData[drawIndex] || {}).x;\n                  tLY = (lastData[drawIndex] || {}).y;\n                } else {\n                  tLX = lastData.x;\n                  tLY = lastData.y;\n                }\n                if (tLX && tLY) {\n                  if (Array.isArray(strokeColorForIndex)) {\n                    ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n                  } else ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n              if (Array.isArray(fillColorForIndex)) {\n                ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n              }\n              if (Array.isArray(strokeColorForIndex)) {\n                ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n              }\n              ctx.beginPath();\n              ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n              ctx.stroke();\n              ctx.fill();\n              nLData[drawIndex] = {\n                x: rbx,\n                y: rby,\n                color: ctx.fillStyle\n              };\n            }\n            lastData = nLData;\n            if (lDu != null && lDu.color != lastData[0].color) this.fillRegions.push({\n              x: lastData[0].x,\n              y: lastData[0].y,\n              prev: lDu.color,\n              next: lastData[0].color\n            });\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index];\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          } else {\n            var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n            var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n            var rbx = renderStartX + widthPerBar / 2,\n              rby = renderUpToY3;\n            var lDu;\n            if (options.fillRegion === 'background') {\n              if (lastData != null) {\n                lDu = lastData;\n                if (Array.isArray(lDu)) lDu = lDu[0];\n                var sFS = ctx.fillStyle;\n                ctx.fillStyle = lDu.color;\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1);\n                ctx.fillStyle = sFS;\n              }\n            }\n            ctx.beginPath();\n            ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.fill();\n            if (lastData != null) {\n              if (Array.isArray(lastData)) {\n                var tLX, tLY;\n                for (var key in lastData) {\n                  if (!lastData.hasOwnProperty(key)) continue;\n                  tLX = lastData[key].x;\n                  tLY = lastData[key].y;\n                  if (tLX && tLY) {\n                    ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                    ctx.beginPath();\n                    ctx.moveTo(tLX, tLY);\n                    ctx.lineTo(rbx, rby);\n                    ctx.stroke();\n                  }\n                }\n              } else {\n                var tLX = lastData.x,\n                  tLY = lastData.y;\n                if (tLX && tLY) {\n                  ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n            }\n            lastData = {\n              x: rbx,\n              y: rby,\n              color: ctx.fillStyle\n            };\n            if (lDu != null && lDu.color != lastData.color) this.fillRegions.push({\n              x: lastData.x,\n              y: lastData.y,\n              prev: lDu.color,\n              next: lastData.color\n            });\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index];\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          }\n          var hint;\n          if (content.hints != null && (hint = content.hints[index]) != null) {\n            this.mouseListeners.push(function (index, hint, sx, sy, ex, ey, x, y) {\n              var minX = Math.min(sx, ex),\n                maxX = Math.max(sx, ex);\n              var minY = Math.min(sy, ey),\n                maxY = Math.max(sy, ey);\n              if (x < minX || x > maxX || y < minY || y > maxY) return null;\n              return {\n                index: index,\n                drawIndex: drawIndex,\n                rect: {\n                  left: minX,\n                  right: maxX,\n                  top: minY,\n                  bottom: maxY\n                },\n                text: hint.split('\\n')\n              };\n            }.bind(this, index, hint, rbx - 1, topYPadding, rbx + 1, topYPadding + remainingHeight));\n          }\n        } else {\n          if (vIsArr) v = Helpers.avg(v);\n          var renderBarHeight2 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n          var renderUpToY2 = topYPadding + remainingHeight - renderBarHeight2;\n          ctx.beginPath();\n          ctx.moveTo(renderStartX + computedBarPadding, topYPadding + remainingHeight);\n          ctx.lineTo(renderStartX + computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight);\n          ctx.stroke();\n          ctx.fill();\n          if (options.barStyle === 'error') {\n            var val;\n            if ((val = content._data_standard_error[index]) != 0) {\n              var renderBarError = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, val));\n              ctx.beginPath();\n              var wiskerWidth = Math.round((widthPerBar - computedBarPadding * 2) / 8);\n              var x_ = leftXPadding + widthPerBar * index + widthPerBar / 2;\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.moveTo(x_, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_, renderUpToY2 - renderBarError);\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.stroke();\n            }\n          }\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({\n              weight: options.fontWeight,\n              size: options.fontSizeLabels,\n              family: options.font\n            });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY2 - 3);\n          }\n        }\n      }\n      ctx.restore();\n      if (this.currentHint != null) {\n        ctx.save();\n        var hRect = this.currentHint.rect,\n          hints = this.currentHint.text;\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.font = Helpers.getFont({\n          weight: options.fontWeight,\n          size: options.fontSizeHint,\n          family: options.font\n        });\n        ctx.textAlign = 'left';\n        var boxWidth = 0;\n        for (index = 0; index < hints.length; ++index) {\n          boxWidth = Math.max(boxWidth, Math.ceil(ctx.measureText(hints[index]).width));\n        }\n        var boxWidthPadding = 5;\n        var lineHeight = options.fontSizeHint * 1.5;\n        var boxHeight = hints.length * lineHeight;\n        var drawX = hRect.right + 10,\n          drawY = (hRect.top + hRect.bottom) / 2;\n        boxWidth += boxWidthPadding * 2;\n        if (drawX + boxWidth > width) {\n          drawX = hRect.left - boxWidth - 10;\n        }\n        if (drawY - boxHeight / 2 < 0) {\n          drawY = Math.ceil(boxHeight / 2) + 1;\n        } else if (drawY + boxHeight / 2 > height) {\n          drawY = height - boxHeight / 2 - 1;\n        }\n        ctx.clearRect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.beginPath();\n        ctx.rect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.stroke();\n        for (index = 0; index < hints.length; ++index) {\n          ctx.fillText(hints[index], drawX + boxWidthPadding, drawY - boxHeight / 2 + options.fontSizeHint + index * lineHeight);\n        }\n        ctx.restore();\n      }\n      ctx.translate(0.5, 0.5);\n      this.labelPositions = labelPositions;\n    };\n    return BarChart;\n  }();\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = BarChart;\n  } else {\n    window.BarChart = BarChart;\n  }\n})();","map":{"version":3,"names":["Math","log2","x","log","LN2","log10","LN10","Helpers","avg","arr","v","index","length","min","v2","Array","isArray","max","upperMax","lowerMin","Infinity","isNaN","isFinite","niceNumbers","range","round","exponent","floor","fraction","pow","niceFraction","getLinearTicks","maxTicks","tickSpacing","ceil","getFont","options","style","variant","weight","size","family","join","getAxisRatio","value","BarChart","ctx","mouseListeners","currentHint","fillRegions","font","fontWeight","fontSizeTitle","fontSizeAxes","fontSizeTicks","fontSizeLabels","fontDataTags","fontSizeLegend","fontSizeHint","paddingPercentBars","paddingPercentTicks","paddingPixelsVertical","paddingPixelsHorizontal","paddingPixelsTicks","maxWidthBars","fillColorBackground","strokeColorBars","fillColorBars","scaleStyle","barStyle","stackedBarPadding","defaultMaxTick","pixelsLegendSquare","radiusDot","fillColorLegend","tickFormatter","tickFormatterMeasure","fillRegion","key","hasOwnProperty","content","labelPositions","prototype","update","Error","labels","data","_data_standard_deviation","_data_standard_error","i","isArr","i3","mean","acc","i2","sqrt","push","redraw","setTimeout","_draw","bind","mousemove","y","res","ch","drawIndex","width","canvas","height","clearRect","translate","remainingWidth","remainingHeight","save","fillStyle","fillRect","restore","topYPadding","title","textAlign","fillText","leftXPadding","leftXDrawYLabel","yAxis","maxChartValue","minChartValue","cmIndex","doB","tempSum","ii2","indexOf","floater","parseFloat","split","bars","cbv","maxYAxisTickWidth","measureText","rightXPadding","legend","maxLWidth","lIndex","label","legendEntriesPerLine","lLReqHeight","bottomYPadding","strokeStyle","bSX","bSY","beginPath","moveTo","lineTo","stroke","fill","legLine","legCol","color","boxX","boxY","xAxis","widthPerBar","topLabels","reqWidth","dataTags","index2","computedBarPadding","wwh","maxTextWidth","maxTextStackSize","tLabel","xLabelsRotated","rotate","PI","lastLabelY","cLabel","yUp","remVal","boundX1","boundX2","boundY1","boundY2","xStart","xEnd","yStart","yEnd","topLabel","tickMeta","alpha","ticks","tickHeight","toString","cBar","renderBarY","lastData","fillColorForIndex","strokeColorForIndex","fillColor","strokeColor","vIsArr","renderStartX","runningValue","lastHeight","renderBarHeight","renderUpToY","abs","barPadP","tSX","tSY","tEX","tEY","hint","hints","sx","sy","ex","ey","minX","maxX","minY","maxY","rect","left","right","top","bottom","text","tagText","oFS","barTooltips","rbx","lDu","sFS","nLData","renderBarHeight3","renderUpToY3","rby","tLX","tLY","arc","prev","next","balls","ball","radius","renderBarHeight2","renderUpToY2","val","renderBarError","wiskerWidth","x_","hRect","boxWidth","boxWidthPadding","lineHeight","boxHeight","drawX","drawY","module","exports","window"],"sources":["C:/Users/diego/seniorprojectv4/node_modules/chartjs/chart.js"],"sourcesContent":["/*global module:true*/\n'use strict';\n\nMath.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n\nMath.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n(function() {\n  var Helpers = {\n    avg: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        v += arr[index];\n      }\n      return v / arr.length;\n    },\n    min: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0];\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 < v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    max: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    upperMax: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.max(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    lowerMin: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0] || Infinity;\n      if (Array.isArray(v)) v = Helpers.lowerMin(v);\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (v2 == null) continue;\n        if (Array.isArray(v2)) v2 = Helpers.lowerMin(v2);\n        if (v2 < v) v = v2;\n      }\n      if (isNaN(v) || !isFinite(v)) v = 0;\n      return Math.max(0, v);\n    },\n    niceNumbers: function(range, round) {\n      var exponent = Math.floor(Math.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n      if (round) {\n        if (fraction < 1.5) niceFraction = 1;\n        else if (fraction < 3) niceFraction = 2;\n        else if (fraction < 7) niceFraction = 5;\n        else niceFraction = 10;\n      } else {\n        if (fraction <= 1.0) niceFraction = 1;\n        else if (fraction <= 2) niceFraction = 2;\n        else if (fraction <= 5) niceFraction = 5;\n        else niceFraction = 10;\n      }\n      return niceFraction * Math.pow(10, exponent);\n    },\n    getLinearTicks: function(min, max, maxTicks) {\n      var range = Helpers.niceNumbers(max - min, false);\n      var tickSpacing = Helpers.niceNumbers(range / (maxTicks - 1), true);\n      return [\n        Math.floor(min / tickSpacing) * tickSpacing,\n        Math.ceil(max / tickSpacing) * tickSpacing,\n        tickSpacing\n      ];\n    },\n    getFont: function(options) {\n      options.style = options.style || 'normal';\n      options.variant = options.variant || 'normal';\n      options.weight = options.weight || 'lighter';\n      options.size = options.size || '12';\n      options.family = options.family || 'Arial';\n      return [options.style, options.variant, options.weight, options.size + 'px', options.family].join(' ');\n    },\n    getAxisRatio: function(min, max, value) {\n      return (value - min) / (max - min);\n    }\n  };\n\n  var BarChart = (function() {\n    function BarChart(ctx, options) {\n      this.mouseListeners = [];\n      this.currentHint = null;\n      this.fillRegions = []\n      this.options = {\n        font: 'Helvetica',\n        fontWeight: 'normal',\n        fontSizeTitle: 24,\n        fontSizeAxes: 20,\n        fontSizeTicks: 18,\n        fontSizeLabels: 18,\n        fontDataTags: 18,\n        fontSizeLegend: 18,\n        fontSizeHint: 18,\n        paddingPercentBars: 0.10,\n        paddingPercentTicks: 0.15,\n        paddingPixelsVertical: 10,\n        paddingPixelsHorizontal: 10,\n        paddingPixelsTicks: 10,\n        maxWidthBars: 0,\n        fillColorBackground: 'rgb(255, 255, 255)',\n        strokeColorBars: 'rgb(0, 0, 0)',\n        fillColorBars: 'rgba(180, 180, 180, 0.25)',\n        scaleStyle: 'linear',\n        barStyle: 'none',\n        stackedBarPadding: 3,\n        defaultMaxTick: 0,\n        pixelsLegendSquare: 10,\n        radiusDot: 5,\n        fillColorLegend: 'rgb(230, 230, 230)',\n        tickFormatter: null,\n        tickFormatterMeasure: null,\n        fillRegion: 'normal'\n      };\n      options = options || { };\n      for (var key in this.options) {\n        if (options.hasOwnProperty(key)) this.options[key] = options[key];\n      }\n      this.ctx = ctx;\n      this.content = { };\n      this.labelPositions = { }\n    }\n\n    BarChart.prototype.update = function(content) {\n      if (typeof content !== 'object') {\n        throw new Error('Collections must be objects.');\n      } else if (!(content.hasOwnProperty('labels') && content.hasOwnProperty('data'))) {\n        throw new Error('Collection must specify labels and data.');\n      } else if (!(Array.isArray(content.labels) && Array.isArray(content.data))) {\n        throw new Error('Labels and data must be arrays.');\n      } else if (content.labels.length !== content.data.length) {\n        throw new Error('Labels and data length must match.');\n      }\n      content._data_standard_deviation = [];\n      content._data_standard_error = [];\n      for (var i = 0; i < content.data.length; ++i) {\n        var isArr = Array.isArray(content.data[i]);\n        if (this.options.scaleStyle === 'log2') {\n          if (isArr) {\n            for (var i3 = 0; i3 < content.data[i].length; ++i3) content.data[i][i3] = Math.log2(content.data[i][i3]);\n          } else content.data[i] = Math.log2(content.data[i]);\n        }\n        if (isArr) {\n          var mean = Helpers.avg(content.data[i]);\n          var acc = 0;\n          for (var i2 = 0; i2 < content.data[i].length; ++i2) acc += Math.pow(mean - content.data[i][i2], 2);\n          acc = Math.sqrt(acc / (content.data[i].length - 1));\n          content._data_standard_deviation.push(acc);\n          content._data_standard_error.push(acc / Math.sqrt(content.data[i].length));\n        } else {\n          content._data_standard_deviation.push(0);\n          content._data_standard_error.push(0);\n        }\n      }\n      this.content = content;\n      this.redraw();\n    };\n\n    BarChart.prototype.redraw = function() {\n      setTimeout(function() {\n        this._draw();\n      }.bind(this), 0);\n    };\n\n    BarChart.prototype.mousemove = function(x, y) {\n      var res = null;\n      for (var index = 0; index < this.mouseListeners.length; ++index) {\n        if ((res = this.mouseListeners[index](x, y))) break;\n      }\n      if (!res || (typeof res) !== 'object' || !res.hasOwnProperty('index') || !res.hasOwnProperty('drawIndex')) {\n        if (this.currentHint !== null) {\n          this.currentHint = null;\n          this.redraw();\n        }\n        return;\n      }\n      var ch = this.currentHint;\n      if (ch == null || ch.index != res.index || ch.drawIndex != res.drawIndex) {\n        this.currentHint = res;\n        this.redraw();\n      }\n    };\n\n    BarChart.prototype._draw = function() {\n      var labelPositions = { }\n      this.mouseListeners = [];\n      this.fillRegions = [];\n\n      var options = this.options;\n      var ctx = this.ctx, content = this.content;\n      var width = ctx.canvas.width, height = ctx.canvas.height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.translate(-0.5, -0.5);\n      var remainingWidth = width, remainingHeight = height;\n      var index;\n\n      if (options.fillColorBackground != null) {\n        ctx.save();\n        ctx.fillStyle = options.fillColorBackground;\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n      }\n\n      var topYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      /* Draw title of bar chart */\n      if (content.title != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTitle, family: options.font });\n        ctx.textAlign = 'center';\n        ctx.fillText(content.title, width / 2, topYPadding + options.fontSizeTitle);\n        ctx.restore();\n        remainingHeight -= options.fontSizeTitle * 1.25;\n        topYPadding += options.fontSizeTitle * 1.25;\n      }\n\n      /* Compute required left padding */\n      var leftXPadding = options.paddingPixelsVertical;\n      remainingWidth  -= options.paddingPixelsVertical;\n\n      var leftXDrawYLabel = null;\n      if (content.yAxis != null) {\n        leftXDrawYLabel = leftXPadding + options.fontSizeAxes * 0.5;\n        remainingWidth -= options.fontSizeAxes * 1.25;\n        leftXPadding += options.fontSizeAxes * 1.25;\n      }\n\n      ctx.save();\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      var maxChartValue, minChartValue;\n      if (options.barStyle === 'stacked') {\n        maxChartValue = 0;\n        minChartValue = Infinity;\n        for (var cmIndex = 0; cmIndex < content.data.length; ++cmIndex) {\n          var doB;\n          if (Array.isArray(doB = content.data[cmIndex])) {\n            var tempSum = 0;\n            for (var ii2 = 0; ii2 < doB.length; ++ii2) tempSum += doB[ii2];\n            maxChartValue = Math.max(maxChartValue, tempSum);\n            minChartValue = Math.min(minChartValue, tempSum);\n          } else {\n            maxChartValue = Math.max(maxChartValue, content.data[cmIndex]);\n            minChartValue = Math.min(minChartValue, content.data[cmIndex]);\n          }\n        }\n      } else {\n        maxChartValue = Helpers.upperMax(content.data);\n        minChartValue = Helpers.lowerMin(content.data);\n      }\n      if (options.scaleStyle.indexOf('adaptive') === 0) {\n        if (options.scaleStyle.indexOf(':') !== -1) {\n          var floater = parseFloat(options.scaleStyle.split(/[:]/)[1]);\n          minChartValue *= floater;\n          maxChartValue *= 1 + (1 - floater) / 2.0;\n        }\n      } else minChartValue = 0;\n      if (options.defaultMaxTick > maxChartValue) maxChartValue = options.defaultMaxTick;\n      if (content.bars != null && Array.isArray(content.bars)) {\n        for (index = 0; index < content.bars.length; ++index) {\n          var cbv = content.bars[index].value;\n          if (isNaN(cbv)) continue;\n          maxChartValue = Math.max(maxChartValue, cbv);\n          minChartValue = Math.min(minChartValue, cbv);\n        }\n      }\n      var maxYAxisTickWidth = options.scaleStyle == 'log2' ? Math.ceil(Math.pow(2, maxChartValue)) : (Math.ceil(maxChartValue) + '.00');\n      if (options.tickFormatterMeasure != null) maxYAxisTickWidth = options.tickFormatterMeasure;\n      maxYAxisTickWidth = ctx.measureText(maxYAxisTickWidth).width;\n      maxYAxisTickWidth = Math.ceil(maxYAxisTickWidth) + options.paddingPixelsTicks;\n      remainingWidth -= maxYAxisTickWidth;\n      leftXPadding += maxYAxisTickWidth;\n      ctx.restore();\n\n      var rightXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n\n      /* Draw legend */\n      if (content.legend != null && Array.isArray(content.legend)) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLegend, family: options.font });\n        var maxLWidth = 0;\n        for (var lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          maxLWidth = Math.max(maxLWidth, ctx.measureText(content.legend[lIndex].label).width);\n        }\n        maxLWidth = Math.ceil(maxLWidth);\n        maxLWidth += options.pixelsLegendSquare + 8;\n        var legendEntriesPerLine = Math.floor((remainingWidth - options.paddingPixelsHorizontal * 2) / maxLWidth);\n        var lLReqHeight = Math.ceil(content.legend.length / legendEntriesPerLine) * options.fontSizeLegend * 1.5;\n        remainingHeight -= lLReqHeight;\n        bottomYPadding += lLReqHeight;\n\n        ctx.strokeStyle = 'rgb(0, 0, 0)';\n        ctx.fillStyle = options.fillColorLegend;\n        var bSX, bSY;\n        ctx.beginPath();\n        ctx.moveTo(bSX = leftXPadding, bSY = topYPadding + remainingHeight);\n        ctx.lineTo(bSX + remainingWidth, bSY);\n        ctx.lineTo(bSX + remainingWidth, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY);\n        ctx.stroke();\n        ctx.fill();\n\n        for (lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          var legLine = Math.floor(lIndex / legendEntriesPerLine);\n          var legCol = lIndex % legendEntriesPerLine;\n          ctx.fillStyle = content.legend[lIndex].color;\n          var boxX = bSX + legCol * maxLWidth + 3, boxY = bSY + legLine * options.fontSizeLegend * 1.5 + options.fontSizeLegend * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(boxX, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY);\n          ctx.fill();\n          ctx.stroke();\n\n          ctx.textAlign = 'left';\n          ctx.fillStyle = 'rgb(0, 0, 0)';\n          ctx.fillText(content.legend[lIndex].label, boxX + 3 + options.pixelsLegendSquare, boxY + options.fontSizeLegend * 0.5);\n        }\n\n        ctx.restore();\n      }\n\n      /* Draw x-axis label of bar chart */\n      var bottomYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      if (content.xAxis != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.xAxis, (width - remainingWidth) + remainingWidth / 2, topYPadding + remainingHeight - bottomYPadding);\n        remainingHeight -= options.fontSizeAxes * 1.5;\n        bottomYPadding += options.fontSizeAxes * 1.5;\n        ctx.restore();\n      }\n\n      var widthPerBar = remainingWidth / content.data.length;\n\n      /* Draw x-axis top labels */\n      if (content.topLabels != null) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        remainingHeight -= options.fontSizeLabels * 1.5;\n        topYPadding += options.fontSizeLabels * 1.5;\n        for (index = 0; index < content.topLabels.length; ++index) {\n          ctx.fillText(\n            content.topLabels[index],\n            leftXPadding + index * widthPerBar + widthPerBar / 2,\n            topYPadding - options.fontSizeLabels / 2\n          );\n        }\n        ctx.restore();\n      }\n\n      /* Draw x-axis labels */\n      ctx.save();\n      var reqWidth = 0;\n      if (content.dataTags != null) {\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n        var dataTags = content.dataTags;\n        for (index = 0; index < dataTags.length; ++index) {\n          if (Array.isArray(dataTags[index])) {\n            for (var index2 = 0; index2 < dataTags[index].length; ++index2) {\n              reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index][index2]).width + 5));\n            }\n          } else {\n            reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index]).width + 5));\n          }\n        }\n      }\n\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n      var computedBarPadding = Math.floor((widthPerBar * options.paddingPercentBars) / 2);\n      var wwh = widthPerBar - computedBarPadding * 2;\n      if (wwh < reqWidth) {\n        computedBarPadding -= Math.ceil((reqWidth - wwh) / 2);\n        computedBarPadding = Math.max(0, computedBarPadding);\n      } else if (options.maxWidthBars > 0 && wwh > options.maxWidthBars) {\n        computedBarPadding = Math.floor((widthPerBar - options.maxWidthBars) / 2);\n      }\n      var maxTextWidth = 0, maxTextStackSize = 1;\n      for (index = 0; index < content.labels.length; ++index) {\n        var tLabel = content.labels[index];\n        if (Array.isArray(tLabel)) {\n          maxTextStackSize = Math.max(maxTextStackSize, tLabel.length);\n          for (index2 = 0; index2 < tLabel.length; ++index2) {\n            maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel[index2]).width);\n          }\n        } else maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel).width);\n      }\n      var xLabelsRotated = false;\n      if (maxTextWidth > widthPerBar - computedBarPadding) {\n        ctx.textAlign = 'right';\n        ctx.rotate(Math.PI * 1.5);\n        xLabelsRotated = true;\n      } else {\n        ctx.textAlign = 'center';\n      }\n      var lastLabelY = -options.fontSizeLabels;\n      for (index = 0; index < content.labels.length; ++index) {\n        var cLabel = content.labels[index];\n        var x = leftXPadding + index * widthPerBar + widthPerBar / 2, y = topYPadding + remainingHeight - options.fontSizeLabels / 2;\n        if (xLabelsRotated) {\n          y = topYPadding + remainingHeight - maxTextWidth + 5;\n          y = [x, x = -y][0];\n\n          if (y < lastLabelY + options.fontSizeLabels) continue;\n          lastLabelY = y;\n        }\n        var yUp = options.fontSizeLabels * (maxTextStackSize - 1);\n        if (Array.isArray(cLabel)) {\n          if (xLabelsRotated) {\n            yUp = options.fontSizeLabels * (cLabel.length - 1.5);\n            yUp /= 2;\n          }\n          for (index2 = 0; index2 < cLabel.length; ++index2) {\n            ctx.fillText(cLabel[index2], x, y - yUp);\n            yUp -= options.fontSizeLabels;\n          }\n        } else {\n          if (xLabelsRotated) yUp = -options.fontSizeLabels * 0.25;\n          ctx.fillText(cLabel, x, y - yUp);\n        }\n      }\n      if (xLabelsRotated) {\n        remainingHeight -= maxTextWidth + 5;\n        bottomYPadding += maxTextWidth + 5;\n      } else {\n        var remVal = options.fontSizeLabels * maxTextStackSize;\n        remVal += options.fontSizeLabels * 0.5;\n        remainingHeight -= remVal;\n        bottomYPadding += remVal;\n      }\n      ctx.restore();\n\n      /* Draw boundaries */\n      var boundX1 = leftXPadding, boundX2 = leftXPadding + remainingWidth;\n      var boundY1 = topYPadding, boundY2 = topYPadding + remainingHeight;\n\n      for (index = 0; index < content.labels.length; ++index) labelPositions[index] = {\n        xStart: leftXPadding + index * widthPerBar,\n        xEnd: leftXPadding + (1 + index) * widthPerBar,\n        yStart: boundY1, yEnd: boundY2\n      }\n\n      ctx.save();\n      ctx.strokeStyle = 'rgb(0, 0, 0)';\n      ctx.beginPath();\n      if (content.topLabels != null) {\n        ctx.moveTo(boundX2, boundY1);\n        ctx.lineTo(boundX1, boundY1);\n      } else {\n        ctx.moveTo(boundX1, boundY1);\n      }\n      ctx.lineTo(boundX1, boundY2);\n      ctx.lineTo(boundX2, boundY2);\n      if (content.topLabels != null) ctx.lineTo(leftXPadding + remainingWidth, topYPadding);\n      ctx.stroke();\n      ctx.restore();\n\n      /* Draw top label */\n      if (content.topLabel != null) {\n        ctx.save();\n        ctx.textAlign = 'right';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        ctx.fillText(content.topLabel, leftXPadding - 3, topYPadding - options.fontSizeLabels / 2);\n        ctx.restore();\n      }\n\n      /* Draw y-axis label of bar chart */\n      if (content.yAxis != null) {\n        ctx.save();\n        ctx.rotate(Math.PI * 1.5);\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.yAxis, -(topYPadding + remainingHeight / 2), leftXDrawYLabel);\n        ctx.restore();\n      }\n\n      /* Draw y-axis labels */\n      ctx.save();\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.20)';\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      ctx.textAlign = 'right';\n      var tickMeta = Helpers.getLinearTicks(0, maxChartValue, Math.max(2, remainingHeight / (options.fontSizeTicks * (1 + options.paddingPercentTicks))));\n      var alpha = maxChartValue / options.fontSizeTicks;\n      maxChartValue = tickMeta[1];\n      if (maxChartValue > 1) maxChartValue += Math.ceil(alpha);\n      else maxChartValue += alpha;\n      var ticks = [];\n      while (tickMeta[0] <= tickMeta[1]) {\n        ticks.push(tickMeta[0]);\n        tickMeta[0] += tickMeta[2];\n      }\n      for (index = 0; index < ticks.length; ++index) {\n        var tickHeight = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, ticks[index]));\n        if (tickHeight < 0) continue;\n        if (options.scaleStyle == 'log2' && ticks[index] !== 0) ticks[index] = Math.round(Math.pow(2, ticks[index]));\n        else ticks[index] = Math.floor(ticks[index] * 100) / 100;\n        if (options.tickFormatter != null && typeof options.tickFormatter === 'function') {\n          ctx.fillText(options.tickFormatter(ticks[index]).toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        } else {\n          ctx.fillText(ticks[index].toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        }\n        if (index == 0) continue;\n        ctx.beginPath();\n        ctx.moveTo(leftXPadding, topYPadding + remainingHeight - tickHeight);\n        ctx.lineTo(leftXPadding + remainingWidth, topYPadding + remainingHeight - tickHeight);\n        ctx.stroke();\n      }\n      ctx.restore();\n\n      if (content.bars != null && Array.isArray(content.bars)) {\n        ctx.save();\n        for (index = 0; index < content.bars.length; ++index) {\n          var cBar = content.bars[index];\n          if (cBar.value > maxChartValue) continue;\n          var renderBarY = topYPadding + remainingHeight - Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, cBar.value));\n          ctx.strokeStyle = cBar.style;\n          ctx.fillStyle = cBar.style;\n          ctx.beginPath();\n          ctx.moveTo(boundX1, renderBarY);\n          ctx.lineTo(boundX2, renderBarY);\n          ctx.stroke();\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n\n      /* Draw bars */\n      ctx.save();\n      var lastData = null;\n      for (index = 0; index < content.data.length; ++index) {\n        var fillColorForIndex = null;\n        var strokeColorForIndex = null;\n        if (content.fillColor != null) {\n          if (Array.isArray(content.fillColor)) fillColorForIndex = ctx.fillStyle = content.fillColor[index];\n          else ctx.fillStyle = content.fillColor;\n        } else ctx.fillStyle = options.fillColorBars;\n        if (content.strokeColor != null) {\n          if (Array.isArray(content.strokeColor)) strokeColorForIndex = ctx.strokeStyle = content.strokeColor[index];\n          else ctx.strokeStyle = content.strokeColor;\n        } else ctx.strokeStyle = options.strokeColorBars;\n        var v = content.data[index];\n        var vIsArr = Array.isArray(v);\n        var renderStartX = leftXPadding + widthPerBar * index;\n        if (vIsArr && options.barStyle === 'stacked') {\n          var runningValue = 0, lastHeight = 0;\n          for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n            if (fillColorForIndex != null && Array.isArray(fillColorForIndex)) {\n              ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n            }\n            if (strokeColorForIndex != null && Array.isArray(strokeColorForIndex)) {\n              ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n            }\n\n            runningValue += v[drawIndex];\n            var renderBarHeight = Math.floor(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, runningValue));\n            var renderUpToY = topYPadding + remainingHeight - renderBarHeight;\n            if (Math.abs(renderBarHeight - lastHeight) < options.stackedBarPadding + 2) {\n              lastHeight = renderBarHeight;\n              continue;\n            }\n\n            var barPadP = drawIndex > 0 ? options.stackedBarPadding : 0;\n            var tSX, tSY;\n            var tEX, tEY;\n            ctx.beginPath();\n            ctx.moveTo(tSX = renderStartX + computedBarPadding, tSY = topYPadding + remainingHeight - lastHeight - barPadP);\n            ctx.lineTo(renderStartX + computedBarPadding, renderUpToY);\n            ctx.lineTo(tEX = renderStartX + (widthPerBar - 1) - computedBarPadding, tEY = renderUpToY);\n            ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight - lastHeight - barPadP);\n            if (drawIndex > 0) ctx.lineTo(tSX, tSY);\n            ctx.stroke();\n            ctx.fill();\n            var hint;\n            if (content.hints != null && content.hints[index] != null && (hint = content.hints[index][drawIndex]) != null) {\n              this.mouseListeners.push(function(index, drawIndex, hint, sx, sy, ex, ey, x, y) {\n                var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n                var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n                if (x < minX || x > maxX || y < minY || y > maxY) return null;\n                return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n              }.bind(this, index, drawIndex, hint, tSX, tSY, tEX, tEY));\n            }\n\n            var tagText;\n            if (tSY - renderUpToY > options.fontDataTags * 1.25 && content.dataTags != null && (tagText = content.dataTags[index]) != null && (tagText = tagText[drawIndex]) != null) {\n              var oFS = ctx.fillStyle;\n              ctx.fillStyle = 'rgb(0, 0, 0)';\n              ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n              ctx.textAlign = 'center';\n              ctx.fillText(tagText, renderStartX + widthPerBar / 2, tSY - options.fontDataTags * 0.25);\n              ctx.fillStyle = oFS;\n            }\n\n            lastHeight = renderBarHeight;\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY - 3);\n          }\n        } else if (options.barStyle === 'line') {\n          if (vIsArr) {\n            var rbx = renderStartX + widthPerBar / 2;\n\n            var lDu;\n            if (options.fillRegion === 'background') {\n              lDu = lastData;\n              if (Array.isArray(lDu)) lDu = lDu[0];\n              if (lDu != null) {\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n\n            var nLData = [];\n            for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n              var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v[drawIndex]));\n              var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n              var rby = renderUpToY3;\n              if (lastData != null) {\n                var tLX, tLY;\n                if (Array.isArray(lastData)) {\n                  tLX = (lastData[drawIndex] || { }).x;\n                  tLY = (lastData[drawIndex] || { }).y;\n                } else {\n                  tLX = lastData.x;\n                  tLY = lastData.y;\n                }\n\n                if (tLX && tLY) {\n                  if (Array.isArray(strokeColorForIndex)) {\n                    ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n                  } else ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n\n              if (Array.isArray(fillColorForIndex)) {\n                ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n              }\n              if (Array.isArray(strokeColorForIndex)) {\n                ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n              }\n\n              ctx.beginPath();\n              ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n              ctx.stroke();\n              ctx.fill();\n\n              nLData[drawIndex] = { x: rbx, y: rby, color: ctx.fillStyle };\n            }\n            lastData = nLData;\n            if (lDu != null && lDu.color != lastData[0].color) this.fillRegions.push({\n              x: lastData[0].x,\n              y: lastData[0].y,\n              prev: lDu.color,\n              next: lastData[0].color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          } else {\n            var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n            var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n            var rbx = renderStartX + widthPerBar / 2, rby = renderUpToY3;\n            var lDu;\n            if (options.fillRegion === 'background') {\n              if (lastData != null) {\n                lDu = lastData;\n                if (Array.isArray(lDu)) lDu = lDu[0];\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n            ctx.beginPath();\n            ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.fill();\n\n            if (lastData != null) {\n              if (Array.isArray(lastData)) {\n                var tLX, tLY;\n                for (var key in lastData) {\n                  if (!lastData.hasOwnProperty(key)) continue;\n                  tLX = lastData[key].x;\n                  tLY = lastData[key].y;\n                  if (tLX && tLY) {\n                    ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                    ctx.beginPath();\n                    ctx.moveTo(tLX, tLY);\n                    ctx.lineTo(rbx, rby);\n                    ctx.stroke();\n                  }\n                }\n              } else {\n                var tLX = lastData.x, tLY = lastData.y;\n                if (tLX && tLY) {\n                  ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            lastData = { x: rbx, y: rby, color: ctx.fillStyle };\n            if (lDu != null && lDu.color != lastData.color) this.fillRegions.push({\n              x: lastData.x,\n              y: lastData.y,\n              prev: lDu.color,\n              next: lastData.color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          }\n\n          var hint;\n          if (content.hints != null && (hint = content.hints[index]) != null) {\n            this.mouseListeners.push(function(index, hint, sx, sy, ex, ey, x, y) {\n              var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n              var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n              if (x < minX || x > maxX || y < minY || y > maxY) return null;\n              return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n            }.bind(this, index, hint, rbx - 1, topYPadding, rbx + 1, topYPadding + remainingHeight));\n          }\n        } else {\n          if (vIsArr) v = Helpers.avg(v);\n          var renderBarHeight2 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n          var renderUpToY2 = topYPadding + remainingHeight - renderBarHeight2;\n          ctx.beginPath();\n          ctx.moveTo(renderStartX + computedBarPadding, topYPadding + remainingHeight);\n          ctx.lineTo(renderStartX + computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight);\n          ctx.stroke();\n          ctx.fill();\n\n          if (options.barStyle === 'error') {\n            var val;\n            if ((val = content._data_standard_error[index]) != 0) {\n              var renderBarError = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, val));\n              ctx.beginPath();\n              var wiskerWidth = Math.round((widthPerBar - computedBarPadding * 2) / 8);\n              var x_ = leftXPadding + widthPerBar * index + widthPerBar / 2;\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.moveTo(x_, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_, renderUpToY2 - renderBarError);\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.stroke();\n            }\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY2 - 3);\n          }\n        }\n      }\n      ctx.restore();\n\n      if (this.currentHint != null) {\n        ctx.save();\n        var hRect = this.currentHint.rect, hints = this.currentHint.text;\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeHint, family: options.font });\n        ctx.textAlign = 'left';\n        var boxWidth = 0;\n        for (index = 0; index < hints.length; ++index) {\n          boxWidth = Math.max(boxWidth, Math.ceil(ctx.measureText(hints[index]).width));\n        }\n        var boxWidthPadding = 5;\n        var lineHeight = options.fontSizeHint * 1.5;\n        var boxHeight = hints.length * lineHeight;\n        var drawX = hRect.right + 10, drawY = (hRect.top + hRect.bottom) / 2;\n        boxWidth += boxWidthPadding * 2;\n        if (drawX + boxWidth > width) {\n          drawX = hRect.left - boxWidth - 10;\n        }\n        if (drawY - boxHeight / 2 < 0) {\n          drawY = Math.ceil(boxHeight / 2) + 1;\n        } else if (drawY + boxHeight / 2 > height) {\n          drawY = height - boxHeight / 2 - 1;\n        }\n        ctx.clearRect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.beginPath();\n        ctx.rect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.stroke();\n        for (index = 0; index < hints.length; ++index) {\n          ctx.fillText(hints[index], drawX + boxWidthPadding, drawY - boxHeight / 2 + options.fontSizeHint + index * lineHeight);\n        }\n        ctx.restore();\n      }\n\n      ctx.translate(0.5, 0.5);\n\n      this.labelPositions = labelPositions;\n    };\n\n    return BarChart;\n  })();\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = BarChart;\n  } else {\n    window.BarChart = BarChart;\n  }\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}